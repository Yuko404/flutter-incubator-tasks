1. What are benefits of using named constructors? When should I use them?
Улучшение читаемости кода. Не нужно смотреть всю реализацию и пытаться в ней разобраться, чтобы понять, что данный конструктор делает, достаточно ориентироваться на название и передаваемые параметры. Это помогает как и разработчикам, так и пользователям библиотек (если конструктор реализован в библиотеке), так как зачастую реализация скрыта.
Инкапсуляция и разнообразность создания. Внутри конструктора может происходить что угодно: туда может быть передана строка, ссылка, число и т.п., объект может быть создан по каким-то правилам внутри конструктора, но в конце концов мы точно получим объект нужного нам типа.

Использовать именованые конструкторы стоит тогда, когда есть несколько вариантом создания объекта, которые отличаются друг от друга. Тогда использование конструкторов поможет разобраться вам и другим разработчикам в коде.

2. What are benefits of using factory constructors? When should I use them?
Полиморфизм. Мы может вызывать родительский класс, передать ему соответствующие параметры, а в итоге получить объект дочерного класса, который соответствует его данным. Это помогает создавать общую "фабрику" для создания разных типов объектов (но только дочерних и объектов данного класса!).
Singleton паттерн. Соглано данному паттерну, объект должен существовать только один. И если мы пытаемся создать объект класса, объект которого уже существует, то должны получить instance этого объекта. Благодаря фабричным констркуторам это возможно! Мы можем проверить, существует ли такой объект и, если да, то вернуть instance этого объекта вместо создания нового.

3. How do both differ?
Фабричные конструкторы позволяют создавать объекты не только текущего класса, как именованные конструкторы, но также и объекты дочерних классов. Именованный конструктор в любом случае создаёт новый объект, даже если такой объект существует. У нас не получиться получить instance уже созданного объекта.
Также фабричный конструктор не имеет доступа к this, так как он не создаёт объект, а просто возвращает его.
В целом, именованные и фабричные конструкторы выполняют разные цели. Если фабричные констркуторы позволяют создать единую точку создания класса, то именованный позволяет создавать по-разному объекты текущего класса.

