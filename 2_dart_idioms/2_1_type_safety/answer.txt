1. Why should you be explicit about types in [Dart]?

Указывать типы явно - очень важно. Несмотря на то, что Dart поддерживает тип данных dynamic, при котором явно указывать типа данных ненужно, использовать его везде не рекомендуется. Связано это с тем, что мы теряем все бенефиты от статистической типизации в Dart. Статистическая типизация позволяет отлавливать ошибки, связанные с типами данных, на этапе написания кода и компиляции. Мы всегда знаем, какой тип перед нами. И программисты, которые смотрят наш код, тоже будут знать, поэтому и код будет читабельнее. Использование dynamic нежелательно в целом ещё потому, что любой тип данных может вернуть из, например, функции, что может повлечь за собой грубые ошибки во время работы программы.

2. What is a [newtype idiom][21] and why is it useful?

Newtype idiom - шаблон проектирования, который обеспечивает типобезопасность. Основная его идея заключается в том, чтобы на моменте компиляции проверить, правильный ли быз задан тип. Его очень полезно использовать, когда есть несколько параметров с одинаковым типом данных. Чтобы гарантировать, что мы будем использовать именно ту переменную, которую нам нужно, мы используем newtype idiom. Также с помощью его мы можем инкапсулировать логику внутри объекта. Вместо того, чтобы проверять в отдельной функции, например, соответствие формату, мы можем прописать это в классе, который представляет собой нашу переменную.