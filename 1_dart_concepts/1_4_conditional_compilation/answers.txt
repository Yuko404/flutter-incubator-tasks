1-2. How [Dart] compiles to and works on native platforms? In web? What is [Dart] VM? How does it work?


Так как подобного рода вопросы уже были для задания 0, отвечу цитатами из моего ответа на те вопросы. "Dart VM - виртуальная машина, которая запускает код, написанный на Dart. Dart VM поставляется с двумя компиляторами - JIT и AOT. Для Native Dart VM использует свой JIT-компилятор во время разработки и AOT-компилятор для публикации приложения. В Web также имеется два вида компиляторов, однако код компилируется в JS с помощью dart2js или WebAssembly с помощью Wasm. Интерфейс для Native отрисовывается с помощью движка Skia для старых версий Android и Impeller для новых версий Android (судя по планам разработки Dart, но, возможно, всё ещё применяется Skia) и для IOS. Для Web же интерфейс отрисовывается с помощью Skia путём его компиляции с помощью WebAssembly или же переводится в HTML, CSS". Для компиляции используется 2 типа компиляторов. " JIT(just-in-time)-компилятор используется во время разработки для того, чтобы обеспечить быструю перезагрузку (Hot Reload), однако при таком варианте программа на старте может запускать медленнее. Это обусловлено тем, что код компилируется "на лету" при запуске. ... AOT(ahead-of-time)-компилятор используется во время публикации приложения. При таком варианте код компилируется заранее, а приложение "чистится" от ненужных инструментов (Dart Dev Tools, Dart VM и прочее) для того, чтобы уменьшить размер приложения. После такой компиляции приложение представляет собой машинный код для нужной ОС, поэтому приложение запускается быстрее."


3. Why may some libraries be unavailable in web or natively?

Недоступность некоторых библиотек связана с их внутренней реализацией. Dart поддерживает кроссплатформенность и поэтому для каждой из платформ (обычно разделение идёт только на native и web) существуют свои инструменты для решения похожих задач. Например, для получения доступа ко времени в Native и в Web будут использоваться разные инструменты (например, команды, API и т.п.), несмотря на похожесть задач. Поэтому и используется условная компиляция для того, чтобы поддерживать эту кроссплатформенность и использовать единую библиотеку для того, чтобы решать одну задачу на разных платформах, несмотря на разную внутренюю реализацию. Примером недоступной библиотеки для разных платформ может послужить стандартная dart:io для native (недоступна в web). 


4. How to check whether [Dart] supports a library on the platform it compiles on?

Узнать это можно на разных этапах. Например, если устанавливать библиотеку с pub.dev, то там всегда находится список платформ, которые поддерживает библиотека. Поэтому удобно узнать перед началом внедрения библиотеки, подходит она или нет. Это также можно определить с помощью условных импортов. Написать небольшую структуру условного импорта и использовать нужную библиотеку для платформы, для которой разрабатывается приложение, а в другом случае - заглушку. Далее скомпилировать файл и посмотреть, какой код отработает (если в заглушке, тогда не поддерживается). Также можно изучить исходный код библиотеки. Нужно искать импорты платформенно-специфичных библиотек, таких как dart:io или dart:html. Или же искать условный импорт, гарантирующий, что разработчик позаботился о кросс-платформенности. Ещё как вариант можно попробовать подключить библиотеку и запустить приложение. Получим ошибку - библиотеку скомпилировать не выйдет. Таким образом, способ много, однако у всех свои нюансы. Лучше всего заранее проверять, поддерживается ли библиотека, дабы избежать проблем в будущем.