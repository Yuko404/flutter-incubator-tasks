1. What are generics in [Dart]? Why are they useful?

Дженерики — это способ написания кода, который может работать с разными типами данных, не теряя строгой типизации. Дженерики находят своё применение в многих местах: классы, методы, миксины, функции и т.п. Использование дженериков гарантирует, что мы подаём параметр определённого типа, который не может изменяться в ходе программы. Написав класс вида List<T> мы можем передавать ему разные типы параметров (но если мы уже туда подали параметр типа String, мы не можем туда подать параметр типа int). Это обеспечивает безопасность типов. То есть, написание List<int> list = [] гарантирует, что у нас список типа int и не даёт ему принять значения других типов в ходе программы. Компилятор получает точную установку: например, перед нами список int и другие объекты туда мы передать не можем, даже если он пустой. По итогу мы получаем код, который легче поддерживать, читать и анализировать. Другие программисты будут понимать, объект какого типа перед ними. Также дженерики уменьшают количество кода, так как без них нужно было бы писать отдельные классы и функции или же использовать dynamic с проверками. 

2. What is a type parameter? How can a type parameter be constrained?

Параметр типа указывается в принимающей разные типы функции, классе, миксинах и т.п. и выглядят как <T> (или <E>, <S>, <K>, <V>). Он указывает, что тип будет извествен "потом", при выхове. Далее в части программы, где мы их использовали, мы можем обращаться к переменной типа, который будет определён при вызове, в виде, например, T nameOfVar. Он помогает отойти от привязки к типам и определить функцию, методы, миксины и т.п., будто бы они созданы для всех поддерживаемых типов в целом. Написанный с помощью параметров типа код универсален и помогает уменьшить количество строк кода, делая его чище. Типизированный параметр может быть ограничен с помощью конструкции <T extends TypeWeNeedToRestrict>. Такая конструкция значит, что мы принимаем только те типы, которые являются TypeWeNeedToRestrict или его наследниками. Данное ограничение позволяет нам получить доступ к тем методам и полям, которые есть у данного типа, так как компилятор "знает", что они у него точно есть.