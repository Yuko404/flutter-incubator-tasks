1.What runtime Dart has? Does it use a GC (garbage collector)?
  Dart runtime представляет собой среду, которая отвечает за выполнение кода на Dart. В Dart она гибкая и зависит от того, в каком режиме находится приложение (разработка или публикация приложения). В связи с этим, Dart runtime включает в себя разные инструменты. Но постоянные компоненты Dart runtime включают Сборщик мусора (GC), управление потоками с помощью изолятов, Event Loop, систему типов и объектную модель (в Dart всё является объектами). При разработке сюда же добавляются Dart VM с JIT- и AOT-компиляторами, Dart Dev Tools. Да, в Dart есть Сборщик мусора (GC), он следит за тем, чтобы ненужные объекты удалять, освобождая место для других объектов, является неотъемлемой частью программы. В Dart Сборщик мусора делит объекты на поколения. Отмечается старое и молодое поколение. В молодом поколении находятся все объекты по умолчанию, подразумевается, что тут находятся кратковременные объекты. Если после нескольких сборок мусора в молодом поколении, объект выживает, он считается старым поколением. Для обоих поколений существуют свои подходы к сборке мусора.

2.What is Dart VM? How Dart works natively and in a browser, and why?
  Dart VM - виртуальная машина, которая запускает код, написанный на Dart. Dart VM поставляется с двумя компиляторами - JIT и AOT. Для ОС Dart VM использует свой JIT-компилятор во время разработки и AOT-компилятор для публикации приложения. Также имеется возможность отслеживать состояние приложения в реальном времени с помощью DevTools. В Web также имеется два вида компиляторов, однако код компилируется в JS с помощью dart2js или WebAssembly с помощью Wasm. Интерфейс для ОС отрисовывается с помощью движка Skia для старых версий Android и Impeller для новых версий Android (судя по планам разработки Dart, но, возможно, всё ещё применяется Skia) и для IOS. Для Web же интерфейс отрисовывается с помощью Skia путём его компиляции с помощью WebAssembly или же переводится в HTML, CSS.

3.What is JIT and AOT compilation? Which one Dart supports?
  Dart поддерживает оба варианта компиляции. JIT(just-in-time)-компилятор используется во время разработки для того, чтобы обеспечить быструю перезагрузку (Hot Reload), однако при таком варианте программа на старте может запускать медленнее. Это обусловлено тем, что код компилируется "на лету" при запуске. При быстрой перезагрузки код не компилируется заново, вместо этого вычисляется дельта-код для того, чтобы перекомпилировать его отдельно. Часто используемые объекты переносятся в оперативную память для быстрого доступа. AOT(ahead-of-time)-компилятор используется во время публикации приложения. При таком варианте код компилируется заранее, а приложение "чистится" от ненужных инструментов (Dart Dev Tools, Dart VM и прочее) для того, чтобы уменьшить размер приложения. После такой компиляции приложение представляет собой машинный код для нужной ОС, поэтому приложение запускается быстрее.

4.What statically typing means? What is a benefit of using it?
  Статическая типизация в Dart означает то, что все объекты строго типизированы (то есть значение переменной всегда совпадает с её типом на этапе компиляции). Также статическая типизация достигается с помощью использования дженериков (несмотря на то, что в большинстве случаев Dart сам понимает, объект какого типа перед ним, дженерики рекомендуются к использованию, если они не излишни). Преимуществом этого является то, что ошибки, связанные с этим, решаются на этапе разработки. Несмотря на это, в Dart есть тип dynamic, который позволяет избежать строгой типизации, однако он нуждается в дополнительных проверках, дабы избежать ошибок runtime'а.

5.What memory model Dart has? Is it single-threaded or multiple-threaded?
  Dart - однопоточный язык. Все процессы в нём выполняются в одном потоке, поэтому при синхронном программировании остальные процессы тормозятся, пока не выполнится текущий. Однако в Dart существуют изоляты, которые позволяют некоторые процессы запускать в нескольких потоках.

6.Does Dart has asynchronous programming? Parallel programming?
  Dart поддерживает асинхронность. Для этого в нём имеются классы Future (для одного асинхронного результата), Stream (для очереди асинхронных результатов), ключевые слова async, await и прочее. Параллельное программирование также присутствует в Dart и достигается с помощью Изолятов. Они имеют свою память, свой Event Loop. Таким образом код может работать параллельно в разных изолятах. Но изоляты не могут напрямую обращаться к памяти друг друга, а общаются исключительно через передачу сообщений.

7.Is Dart OOP language? Does it have an inheritance?
  Да, Dart - объектно-ориентированный язык, в нем все переменные - объекты (даже числа или строки). Все принципы ООП поддерживаются и соблюдаются в Dart, в том числе и наследование. Класс может наследоваться от другого класса (но только от одного), может наследовать поведение с помощью миксинов (не только от одного).